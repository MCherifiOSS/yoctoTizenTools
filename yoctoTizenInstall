#!/bin/bash
# -*- coding: utf-8 -*-
#
# Copyright (c) 2012-2013 Intel, Inc.
# License: GPLv2
# Authors: Ronan Le Martret <ronan.lemartret@open.eurogiciel.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.

REBOOT_AFTER=no
VERBOSE="yes"
SHOW_HELP="no"
DEPLOY_DIR=
SSH_COMMAND="ssh ${REMOTE_USER}@${REMOTE_HOST} -- "

while test $# -gt 0; do
  case $1 in
    *-help)
      SHOW_HELP="yes"
      shift
    ;;
    *-h)
      SHOW_HELP="yes"
      shift
    ;;
    *-reboot_after)
      REBOOT_AFTER="yes"
      shift
    ;;
    *-no_remote)
      SSH_COMMAND=
      shift
    ;;
    *-image_src_dir)
      DEPLOY_DIR=$2
      shift
      shift
    ;;
    *-verbose)
      VERBOSE=$2
      shift
      shift
    ;;
    *)
      echo "Unknown parameter $1."
      echo "This script is not accepting this parameter currently."
      exit 1
    ;;
  esac
  shift
done

if [ ${SHOW_HELP} != "no" ]; then
    echo "copy yocto image to partition"
    echo "    --help,-h show this help"
    echo "    --no_remote do not  run this script to remote target"
    echo "    --image_src_dir use alternative directory source for image/kernel files"
    echo "    --reboot_after reboot target after copy"
    echo "    --verbose yes/no default yes"
    exit 0
fi

SCRIPT_DIR=$(dirname $0)

# If user have no yoctoTizenrc
if [ ! -e ${SCRIPT_DIR}/yoctoTizen_config ] ;then
    cp  ${SCRIPT_DIR}/yoctoTizen_config_skeleton ${SCRIPT_DIR}/yoctoTizen_config
fi
source ${SCRIPT_DIR}/yoctoTizen_config

test_parameter() {
    if [ -z $2 ] ;then
        echo The variable \"$1\" is empty please configure it.
        echo Open file ${SCRIPT_DIR}/yoctoTizen_config
        exit 1
    fi
}

if [ -z ${SSH_COMMAND} ] ; then
    test_parameter REMOTE_USER ${REMOTE_USER}
    test_parameter REMOTE_HOST ${REMOTE_HOST}
fi

test_parameter WORKINGDIR ${WORKINGDIR}
test_parameter BUILD_PRJ ${BUILD_PRJ}
test_parameter MACHINE ${MACHINE}
test_parameter IMAGE_NAME ${IMAGE_NAME}

if [ -z ${DEPLOY_DIR} ]; then
    DEPLOY_DIR=${WORKINGDIR}/poky/${BUILD_PRJ}/tmp/deploy/images/${MACHINE}
    IMAGE_FILE=${DEPLOY_DIR}/${IMAGE_NAME}-${MACHINE}.ext3
    KERNEL_FILE=${DEPLOY_DIR}/bzImage
else
    if [ ! -d ${DEPLOY_DIR} ]; then
        echo \"${DEPLOY_DIR}\" is not a path directory.
        exit 1
    fi
    if [ $(find ${DEPLOY_DIR} -type f -name *.ext3 | wc -l) -eq 0 ]; then
        echo Can\'t find any file \".ext3\" into directory \"${DEPLOY_DIR}\".
        exit 1
    fi
    if [ $(find ${DEPLOY_DIR} -type f -name *.ext3 | wc -l) -ne 1 ]; then
        echo Too many files \".ext3\" into directory \"${DEPLOY_DIR}\".
        exit 1
    fi
    IMAGE_FILE=$(ls  ${DEPLOY_DIR}/*.ext3)
    KERNEL_FILE=${DEPLOY_DIR}/bzImage
fi

if [ ! -f ${IMAGE_FILE} ]; then
    echo Can\'t find image file \"${IMAGE_FILE}\"
    exit 1
fi

if [ ! -f ${KERNEL_FILE} ]; then
    echo Can\'t find kernel file \"${KERNEL_FILE}\"
    exit 1
fi

if [ "${VERBOSE}" = "yes" ] ; then
    echo IMAGE_FILE:  ${IMAGE_FILE}
    echo KERNEL_FILE: ${KERNEL_FILE}
    set -x
fi

if [ ! -z ${SSH_COMMAND} ]; then
    $(${SSH_COMMAND}) mkdir -p ${REMOTE_WORKINGDIR_DOWNLOADS}
    scp ${IMAGE_FILE} ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_WORKINGDIR_DOWNLOADS}
    scp ${KERNEL_FILE} ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_WORKINGDIR_DOWNLOADS}
fi

if [ $(${SSH_COMMAND} id -u) != 0 ] ; then
    echo You are not root, please run this script as root.
    exit 1
fi

$(${SSH_COMMAND}) rm -fr /yoctoTizen/*
$(${SSH_COMMAND}) mkdir -p /mnt/YoctoTizen_EXT3
$(${SSH_COMMAND}) mount ${REMOTE_WORKINGDIR_DOWNLOADS}/${IMAGE_NAME}-${MACHINE}.ext3  /mnt/YoctoTizen_EXT3
$(${SSH_COMMAND}) cp -a /mnt/YoctoTizen_EXT3/*  /yoctoTizen
$(${SSH_COMMAND}) umount /mnt/YoctoTizen_EXT3
$(${SSH_COMMAND}) cp -aL ${REMOTE_WORKINGDIR_DOWNLOADS}/bzImage /boot/bzImage_yoctoTizen

$(${SSH_COMMAND}) sync
$(${SSH_COMMAND}) sync

if [ $1 = "reboot_after" ]; then
    $(${SSH_COMMAND}) grub2-reboot ${REBOOT_ENTRY}
    $(${SSH_COMMAND}) shutdown 0 --reboot
fi

if [ ${VERBOSE} = "yes" ] ; then
    set +x
fi
